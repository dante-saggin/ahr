# This file was originally created using ASM tools. It was then modified manually to accommodate Apigee's config.
#
# sudo apt-get install google-cloud-sdk-kpt
# mkdir asm-install && cd asm-install
# kpt pkg get https://github.com/GoogleCloudPlatform/anthos-service-mesh-packages.git/asm@release-1.5-asm .
#
# This file is generated by "kpt" based on gcloud config (which is not accurate for our install). It is
# located @ asm-install/asm/cluster/istio-operator.yaml after using "kpt".
#
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  profile: asm
  hub: gcr.io/gke-release/asm
  tag: 1.5.4-asm.2
  meshConfig:
    # This disables Istio from configuring workloads for mTLS if TLSSettings are not specified. 1.4 defaulted to false.
    enableAutoMtls: false
    accessLogFile: "/dev/stdout"
    accessLogEncoding: 1
    # This is Apigee's custom access log format. Changes should not be made to this
    # unless first working with the Data and AX teams as they parse these logs for
    # SLOs.
    accessLogFormat: '{"start_time":"%START_TIME%","remote_address":"%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%","user_agent":"%REQ(USER-AGENT)%","host":"%REQ(:AUTHORITY)%","request":"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%","request_time":"%DURATION%","status":"%RESPONSE_CODE%","status_details":"%RESPONSE_CODE_DETAILS%","bytes_received":"%BYTES_RECEIVED%","bytes_sent":"%BYTES_SENT%","upstream_address":"%UPSTREAM_HOST%","upstream_response_flags":"%RESPONSE_FLAGS%","upstream_response_time":"%RESPONSE_DURATION%","upstream_service_time":"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%","upstream_cluster":"%UPSTREAM_CLUSTER%","x_forwarded_for":"%REQ(X-FORWARDED-FOR)%","request_method":"%REQ(:METHOD)%","request_path":"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%","request_protocol":"%PROTOCOL%","tls_protocol":"%DOWNSTREAM_TLS_VERSION%","request_id":"%REQ(X-REQUEST-ID)%","sni_host":"%REQUESTED_SERVER_NAME%","apigee_dynamic_data":"%DYNAMIC_METADATA(envoy.lua)%"}'
    defaultConfig:
      proxyMetadata:
        GCP_METADATA: "$PROJECT|$PROJECT_NUMBER|$CLUSTER|$AX_REGION"
        TRUST_DOMAIN: "$PROJECT.svc.id.goog"
        GKE_CLUSTER_URL: "https://container.googleapis.com/v1/projects/$PROJECT/locations/$CLUSTER_ZONE/clusters/$CLUSTER"
  components:
    pilot:
      k8s:
        hpaSpec:
          maxReplicas: 3
    ingressGateways:
      - name: istio-ingressgateway
        enabled: true
        k8s:
          service:
            type: LoadBalancer
            loadBalancerIP: $RUNTIME_IP
            ports:
              - name: status-port
                port: 15020
                targetPort: 15020
              - name: http2
                port: 80
                targetPort: 80
              - name: https
                port: 443
              - name: prometheus
                port: 15030
                targetPort: 15030
              - name: tcp
                port: 31400
                targetPort: 31400
              - name: tls
                port: 15443
                targetPort: 15443
          hpaSpec:
            maxReplicas: 3
  values:
    gateways:
      istio-ingressgateway:
        env:
          GCP_METADATA: "$PROJECT|$PROJECT_NUMBER|$CLUSTER|$AX_REGION"
          TRUST_DOMAIN: "$PROJECT.svc.id.goog"
          GKE_CLUSTER_URL: "https://container.googleapis.com/v1/projects/$PROJECT/locations/$CLUSTER_ZONE/clusters/$CLUSTER"
    prometheus:
      sidecarEnv:
        GCP_METADATA: "$PROJECT|$PROJECT_NUMBER|$CLUSTER|$AX_REGION"
        TRUST_DOMAIN: "$PROJECT.svc.id.goog"
        GKE_CLUSTER_URL: "https://container.googleapis.com/v1/projects/$PROJECT/locations/$CLUSTER_ZONE/clusters/$CLUSTER"
    global:
      meshID: "proj-$PROJECT_NUMBER"
      trustDomain: "$PROJECT.svc.id.goog"
      sds:
        token:
          aud: "$PROJECT"

