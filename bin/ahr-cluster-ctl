#!/bin/bash

set -e

BASEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $BASEDIR/ahr-lib.sh


function show_help(){

    echo " Supported Actions:"
    echo "    create context template delete enable asm-get"
    echo ""
    echo " examples: "
    echo "    ahr-cluster-ctl template <template-file> > <config-file>"
    echo ""
}



ACTION="$1"

#-----------------------------------------------------------------------
if [ "create" == "$ACTION" ]; then


check_envvars "CLUSTER CLUSTER_CONFIG CLUSTER_ZONE CONTEXT PROJECT"

if [ ! -f "$CLUSTER_CONFIG" ]; then
    echo "Cluster file doesn't exist: $CLUSTER_CONFIG"
    exit 1
fi

echo "Cluster definition: $CLUSTER_CONFIG"


response=$(curl --silent -X POST -H "Authorization: Bearer $(token)" -H "Content-Type:application/json" https://container.googleapis.com/v1beta1/projects/$PROJECT/zones/$CLUSTER_ZONE/clusters --data-binary @$CLUSTER_CONFIG)
if [ $( grep -c error <<< "$response" ) -ne 0  ]; then
    echo "$response"

    exit 1
fi


# check operation status
operation=$( jq .name <<< "$response" )

while true; do 
    status=$(gcloud container operations list --format="value(status)" --filter="name=$operation")
    if [ "$status" == "RUNNING" ]; then
        echo -n "."
        sleep 3
    else
        break
    fi
done


set +e

# get cluster context for kubectl
gcloud container clusters get-credentials $CLUSTER --zone $CLUSTER_ZONE

# rename default cluster name to the required one
GKE_CONTEXT=gke_${PROJECT}_${CLUSTER_ZONE}_${CLUSTER}
kubectl config rename-context $GKE_CONTEXT $CONTEXT

# set the cluster role binding
kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user $(gcloud config get-value account)



#-----------------------------------------------------------------------
elif [ "template" == "$ACTION" ]; then

    TEMPLATE=$2
    if [ "$TEMPLATE" = "" ]; then
       echo "Missing Template file: "
       echo ""
       show_help
       exit 1
    fi


    TEMPLATE_VARS=$(envsubst --variables  "$(cat $TEMPLATE)"|sort -u)

    check_envvars "$TEMPLATE_VARS"

    envsubst < $TEMPLATE


#-----------------------------------------------------------------------
elif [ "context" == "$ACTION" ]; then

check_envvars "CONTEXT"

kubectl config use-context $CONTEXT


#-----------------------------------------------------------------------
elif [ "delete" == "$ACTION" ]; then

check_envvars "CLUSTER CLUSTER_ZONE"

   echo -e "Deleting Cluster: $CLUSTER in Zone: $CLUSTER_ZONE."
   response=$(gcloud -q container clusters delete $CLUSTER --region $CLUSTER_ZONE)



#-----------------------------------------------------------------------
elif [ "asm-get" == "$ACTION" ]; then

check_envvars "HYBRID_HOME ASM_TARBALL RUNTIME_CONFIG"


mkdir -p $HYBRID_HOME
cd $HYBRID_HOME


curl -LO https://storage.googleapis.com/apigee-public/apigee-hybrid-setup/$HYBRID_VERSION/$HYBRID_TARBALL
curl -LO https://storage.googleapis.com/gke-release/asm/$ASM_TARBALL

tar xvzf $ASM_TARBALL

# define ASM_HOME
export ASM_HOME=$HYBRID_HOME/$(tar tf $HYBRID_HOME/$ASM_TARBALL | grep LICENSE | cut -d "/" -f 1)

export PATH=$ASM_HOME:$PATH

echo "# To define ASM_HOME in your shell, execute:"
echo "export ASM_HOME=$ASM_HOME"
echo "export PATH=\$ASM_HOME/bin:\$PATH"
echo ""
echo "# or TODO: [ ]"
echo "source <(ahr-runtime-ctl home)"

#-----------------------------------------------------------------------
elif [ "enable" == "$ACTION" ]; then

check_envvars "PROJECT"


   API=$2
   echo -e "Enabling API $API in  $CLUSTER cluster: "
   response=$(gcloud services enable $API --project $PROJECT)


else
    echo "Action unknown: $ACTION"
    echo ""
    show_help
    exit 2
fi
#-----------------------------------------------------------------------
